#!/usr/bin/env python
# __Author__:cmustard

import bs4
import urllib.request
import urllib.parse
import urllib.error
import gzip
import re
from random import choice

from util.userAgent import pcUserAgent
from util.comm import getLogger,printInfo,convertDict

class PluginBase:
    def __init__(self):
        self.code = 200
        self.url = None  # 目标URL
        self.cms_name = None  # cms对应名称
        self.version = None   # cms版本结果
        self.body = None  # 返回的body
        self.static_uri = None  # 需要验证的uri
        self.uri_md5 = None  # 对应uri的md5值
        self.regx = None   # 正则匹配
        self.headers = None  # 头部匹配
        self.title = None   # title匹配
        self.encodeList = ("utf-8", "gb2312", "gbk", "big5")
        self.logger = getLogger()

    def start(self):
        pass

    def plugin(self):
        """
        该函数需要自己实现
        :return:
        """
        """
        title,body,version,header,static,head,text
        """
        matches = [
            {"title":'glamor","body":"<name>'},
            {"version":'<meta name="generator" content="Generic CMS version ([a-z0-9])+'},
            {"body":'This page was generated by <b>Generic CMS</b>'},
            {"header":"Server:cms"},
            {"static":"/uri","md5":"12313123123"},
            {"static":'/uri',"content":"<name>123"},
            {"head":"asdasd"},
            {"text":"123"}, # body and head
        ]
        return matches
        #raise NotImplementedError

    def _verify(self):
        self.matches_result = dict()
        self.matches_result[self.cms_name] = 0
        self.matches = self.plugin()
        for cms_rule in self.matches:
            for sign in list(cms_rule.keys()):
                pass


    def _header(self,sign,rule):
        print(self.raw_headers)
        header_dict = convertDict(str(self.raw_headers))
        print(header_dict)
        pass




    def _find(self,pattern,rawData):
        pattern = re.compile(pattern)
        result = re.findall(pattern,rawData)
        if len(result)>0:
            return True
        else:
            return False


    def output(self):
        """
        该函数需要自己实现,返回一个output字典
        :return:
        """
        raise NotImplementedError



    def _access(self):
        self.urlparse = urllib.parse.urlparse(self.url)
        if self.urlparse.scheme != "http" and self.urlparse.scheme != "https":
            self.url = "{}://{}".format("http",self.url)

        if self.static_uri is not None:
            self.static_uri = urllib.request.quote(self.static_uri)
            self.url = "{}/{}".format(self.url,self.static_uri)
        print(self.url)
        try:
            req = urllib.request.Request(self.url)
            req.add_header("User-Agent",pcUserAgent[choice(list(pcUserAgent.keys()))])
            # req.add_header("cookie","none\r\n")
            req.add_header("Accept-Encoding", "gzip, deflate")
            req.add_header("Referer", self.url)
            raw_html_object = urllib.request.urlopen(req)
            raw_html_contents = raw_html_object.read()
            # get headers from server
            self.raw_headers = raw_html_object.headers
            self.code = raw_html_object.code
            self.contents = self.mygzip(raw_html_contents)
            print(len(self.contents),self.code)
            self._htmlParser()
        except urllib.error.HTTPError as e:
            self.code = e.code
        except Exception as e:
            self.logger.warn(printInfo(__file__,"_htmlParser function: "+str(e)))



    def _htmlParser(self):
        """
        parse html
        :return:
        """
        try:
            bs_object = bs4.BeautifulSoup(self.contents, "html.parser")
            self.raw_body = str(bs_object.body)
            self.raw_title = bs_object.title.get_text()
            self.raw_head = str(bs_object.head)
            # print(type(self.raw_body))
        except Exception as e:
            self.logger.warn(printInfo(__file__,"_parser function: "+str(e)))
            self.raw_body = None
            self.raw_title = None
            self.raw_head = None

    def mygzip(self,contents):
        if isinstance(contents, bytes):
            # print(isinstance(body,bytes))
            for code in self.encodeList:
                try:
                    # gzip decompress
                    try:
                        contents = gzip.decompress(contents).decode(code)
                        break
                    except OSError as e:
                        # self.logger.debug(printInfo(__file__, str(e)))
                        contents = contents.decode(code)
                        break

                except UnicodeDecodeError as e:
                    self.logger.debug(printInfo(__file__, str(e)))
                    continue

                except Exception as e:
                    self.logger.warning(printInfo(__file__, str(e)))
                    contents = ""
        return contents



    def test(self):
        self.url = "www.glamor.site"
        # self.static_uri = "/2.txt"
        self._access()
        self._verify()
        self._header("sign","rule")

if __name__ == '__main__':
    t = PluginBase()
    t.test()